#summary DroidActivator Quick Start Guide

To get started with !DroidActivator, you need to perform the following steps:
 * Install and configure an Apache / Php/ !MySql environment.
 * Install and configure the backend php application.
 * Add activation records to the database
 * Link !DroidActivator's Library to your app 
 * Call the activation process from within your code

== Installing an Apache / Php / !MySql environment ==
The backend is based on the classic combination of Apache - Php - Mysql. If you don't already have it installed on your server, you will find lots of tutorials on the web. One of the most popular solutions on Windows is [http://www.wampserver.com/ WAMP]. Using Apache is not mandatory, you can use any php-enabled web server.

== Installing the backend ==
The backend is written in php and is contained in a folder to be installed on your web server's web folder. Download [http://droidactivator.googlecode.com/files/da_backend.zip da_backend.zip] from the Downloads section, decompress and copy the resulting "da_backend" folder to your web server's web folder.

== Configuring the backend ==
Open the dbconfig.php file (located in the Lib folder inside the da_backend folder) with a text editor and replace the default configuration with your HOST, USERNAME, PASSWORD, DATABASE values.

Open your browser and type http://[yourserveraddress]/da_backend/admin.php

if everything is ok, you should be asked for the Admin password.

Type <b>da</b> and submit (you can change the default password in the dbconfig.php file)

an empty database is created and a a page is shown where you can manage activation records. 

== Adding activation records ==
Fill the fields with activation data. User Id, App Name and Activation code are mandatory. You can leave the other fields blank.
Type an e-mail address as  the !UserId, type the App Name exactly as declared in the "android:label" attribute of your Android App Manifest, and type an 8-digit random code in the Activation Code field. Then, add the record.

Now the backend is ready to respond to the activation requests coming from your Android app.


== Linking !DroidActivator's library to your app ==
 * Download [http://droidactivator.googlecode.com/files/droidactivator.jar droidactivator.jar] from the Downloads section and put it somewhere inside your Android app's folder
 * In Eclipse, open your project's Properties -> Java Build Path-> Libraries, and add the Jar. !DroidActivator's classes should now be available to your app.
 * Open your app's Manifest file and check you have declared the following permissions:

{{{
<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
<uses-permission android:name="android.permission.INTERNET" />
}}}


== Call the activation process from within your code ==


Open your main activity onCreate() method and implement the following code:

{{{
public void onCreate(Bundle savedInstanceState) {
	super.onCreate(savedInstanceState);
			
	// instantiate DroidActivator supplying your server's IP address 
	// and a Runnable to be run after the activation cycle
	DroidActivator.newInstance(this, "http://yourserveraddress:8080",new Runnable() {	
		public void run() {startMyApp();}
	});

	// perform the Activation cycle â€“ your startup method is called when finished
	DroidActivator.doActivationCycle(this);
		
}


// start your app from here
private void startMyApp() {

	// test the activator variables and do whatever is appropriate	
	if (DroidActivator.isActivated()) {
		switch (DroidActivator.getLevel()) {
		case 0:
			//startInDemoMode();
			break;
		case 1:
			//startInBasicMode();
			break;
		case 2:
			//startInProMode();
			break;
		}
	}
	else {
		//startInDemoMode();
	}
}
}}}



When your app starts up, !DroidActivator's Activation dialog should appear. Have fun!