#summary DroidActivator Quick Start Guide

To get started with !DroidActivator, you need to perform the following steps:
 * Install and configure an Apache / Php/ !MySql environment.
 * Install and configure the backend php application.
 * Load activation records into the backend
 * Link the Android Library to your app and call the activation process within your code

== Installing an Apache / Php / !MySql environment ==
The backend is based on the classic combination of Apache - Php - Mysql. If you don't already have it installed on your server, you will find lots of tutorials on the web. One of the most popular solutions on Windows is [http://www.wampserver.com/ WAMP].
Using Apache is not mandatory, you can use any php-enabled web server.

== Installing the backend ==
The backend is written in php and is contained in a folder to be installed on your web server's web folder. Download the backend from [http://droidactivator.googlecode.com/files/da_backend.zip here] and Just copy the uncompressed folder to your Web Server folder.

 * Open your browser and type http://yourserveraddress:8080/activator/, the !DroidActivator's backend home page should appear

== Adding activation records ==
In the backend, go to the Activation's List and add a new record. Type the App Name exactly as declared in the "android:label" attribute of your Android App Manifest, type an e-mail address as  the !UserId, and type an 8-digit random code in the Activation Code field. Then, save the record.

== Linking !DroidActivator's library to your app ==
Download the !DroidAcrivator's library .jar file, open your project's Properties -> Java Build Path-> Libraries, and add the Jar. !DroidActivator's classes hould now be available to your app.

Open your app's Manifest file and check you have declared the following permissions:

{{{
<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
<uses-permission android:name="android.permission.INTERNET" />
}}}

Open your starting activity onCreate() method and implement the following code:

{{{
public void onCreate(Bundle savedInstanceState) {
	super.onCreate(savedInstanceState);
			
	// instantiate DroidActivator supplying your server's IP address 
	// and a Runnable to be run after the activation cycle
	DroidActivator.newInstance(this, "http://yourserveraddress:8080",new Runnable() {	
		public void run() {startMyApp();}
	});

	// perform the Activation cycle â€“ your startup method is called when finished
	DroidActivator.doActivationCycle(this);
		
}


// start your app from here
private void startMyApp() {

	// test the activator variables and do whatever is appropriate	
	if (DroidActivator.isActivated()) {
		switch (DroidActivator.getLevel()) {
		case 0:
			//startInDemoMode();
			break;
		case 1:
			//startInBasicMode();
			break;
		case 2:
			//startInProMode();
			break;
		}
	}
	else {
		//startInDemoMode();
	}
}
}}}

When your app starts up, !DroidActivator's Activation dialog should appear. Have fun!