#summary DroidActivator Quick Start Guide

To get started with !DroidActivator, you need to perform the following steps:
 * Install and configure a SQL server (we will use !MySql Community Server)
 * Install and configure the backend
 * Link the Android Library to your app and call it
 * Load activation records into the backend

== Installing !MySql server ==
 * Download !MySql Community Server from the [http://dev.mysql.com/downloads/mysql/ Downloads Page]
 * Install the server and create a schema named "droidactivator"

== Installing the backend ==
The backend is supplied in a .war file suitable to be run on a standard WebApp container like Apache Tomcat. Here we assume you will use Tomcat. If you are using another container, refer to the container's guide.

 * [http://tomcat.apache.org/ Download and install Apache Tomcat]
 * Download the backend .war file and add it to the Tomcat folder
 * Restart Tomcat and check if the application droidactivator is running
 * Open your browser and type http://yourserveraddress:8080/activator/, the !DroidActivator's backend home page should appear

== Adding activation records ==
In the backend, go to the Actiovation's List and add a new record. Type the App Name esactly as declared in the "android:label" attribute of your Android App Manifest, type an e-mail address as  the UserId, and type an 8-digit random code in the Activation Code field. Then, save the record.

== Linking !DroidActivator's library to your app ==
Download the !DroidAcrivator's library .jar file and put it in the "libs" folder of your Android application. If the folder does not exist create it.

Open your app's Manifest file and check you have declared the following permissions:

{{{
<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
<uses-permission android:name="android.permission.INTERNET" />
}}}

Open your starting activity onCreate() method and implement the following code:

{{{
public void onCreate(Bundle savedInstanceState) {
	super.onCreate(savedInstanceState);
			
	// instantiate DroidActivator supplying your server's IP address 
	// and a Runnable to be run after the activation cycle
	DroidActivator.newInstance(this, "http://yourserveraddress:8080",new Runnable() {	
		public void run() {startMyApp();}
	});

	// perform the Activation cycle â€“ your startup method is called when finished
	DroidActivator.doActivationCycle(this);
		
}


// start your app from here
private void startMyApp() {

	// test the activator variables and do whatever is appropriate	
	if (DroidActivator.isActivated()) {
		switch (DroidActivator.getLevel()) {
		case 0:
			//startInDemoMode();
			break;
		case 1:
			//startInBasicMode();
			break;
		case 2:
			//startInProMode();
			break;
		}
	}
	else {
		//startInDemoMode();
	}
}
}}}

When your app starts up, !DroidActivator's Activation dialog should appear. Have fun!